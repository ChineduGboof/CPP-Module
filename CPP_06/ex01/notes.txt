The exercise requires you to implement a static class Serializer with two methods 
serialize and deserialize, where serialize takes a pointer to a Data object 
and returns an uintptr_t, while deserialize takes an uintptr_t and returns a Data* pointer. 
You must also create a non-empty Data structure, test it by passing its address 
to serialize and the result of that to deserialize, and make sure that 
the returned Data* is equal to the original pointer. 
You must also submit the files of the Data structure.

The code defines a class Data which has three integer data members: x, y, and z. 
It has two constructors - one default constructor that sets all three data members to zero, 
and another that takes three integer arguments and initializes the data members with them.

The second class Serializer is a static class that contains two static methods: 
serialize and deserialize. The serialize method takes a pointer to a 
Data object and returns its memory address as an unsigned integer value uintptr_t 
using the reinterpret_cast operator. The deserialize method takes an uintptr_t value 
and casts it to a Data* pointer using the reinterpret_cast operator.

This class is designed to allow serialization and deserialization of Data objects. 
Serialization is the process of converting an object into a format that 
can be stored or transmitted, while deserialization is the process of 
reconstructing the object from its serialized form.

The code follows the C++98 standard and is split into a header file (Serializer.hpp)
and an implementation file (Serializer.cpp).